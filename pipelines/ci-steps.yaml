#Using Azure Key_vault store for ACR secrets 
steps:

# - bash: |
#     cd spring-boot-web
#     mvn clean package
#   failOnStderr: true
#   displayName: 'maven package - if needed we can push this artifact to artifactory such as JFROG'

- bash: |
    echo $registryServerName
    docker build -t $registryServerName/delphi/$imageName:$iamageTag .
  env:
    registryServerName: $(registryServerName)
    imageName: $(imageName)
    iamageTag: $(iamageTag)

  failOnStderr: true
  displayName: 'docker build'

- bash: |
    az login \
        --service-principal \
        -u $clientid \
        -p $clientsecret \
        --tenant $tenantid
    acrlogin_password=$(az keyvault secret show -n Password --vault-name delphivault | jq -r '.value')
    echo $acrlogin_password | docker login \
        $registryServerName \
        -u $acrlogin_username \
        --password-stdin
  env:
    acrlogin_username: $(acrlogin_username)
    registryServerName: $(registryServerName)
    tenantid: $(tenantid)
    clientid: $(clientid)
    clientsecret: $(clientsecret)
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker login'

- bash: |
    echo $registryServerName
    docker push $registryServerName/delphi/$imageName
  env:
    registryServerName: $(registryServerName)
    imageName: $(imageName)
    imageTag: $(imageTag)
  failOnStderr: true
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker push'

- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
    helm package \
        --version $(helmChartVersion) \
        --app-version $imageTag \
        charts/$projectName
  env:
    imageTag: $(Build.BuildNumber)
    projectName: $(projectName)

  failOnStderr: true
  displayName: 'helm package'
- bash: |
    az login \
        --service-principal \
         -u $clientid \
         -p $clientsecret \
         --tenant $tenantid
    acrlogin_password=$(az keyvault secret show -n Password --vault-name delphivault | jq -r '.value')
    chartPackage=$(ls /home/vsts/work/1/s/delphi-*.tgz)
    az acr helm push \
        -n $registryName \
        -u $acrlogin_username \
        -p $acrlogin_password \
        $chartPackage
    echo $(build.artifactStagingDirectory)
    echo $(jq -n --arg version "$helmChartVersion" '{helmChartVersion: $helmChartVersion}') > $(build.artifactStagingDirectory)/variables.json
    cat $(build.artifactStagingDirectory)/variables.json
  env:
    registryName: $(registryName)
    projectName: $(projectName)
    acrlogin_username: $(acrlogin_username)
    clientid: $(clientid)
    clientsecret: $(clientsecret)
    tenantid: $(tenantid)
    helmChartVersion: $(helmChartVersion)
  failOnStderr: true
  name: helmPush
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'az acr helm push'
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
