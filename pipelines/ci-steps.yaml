#Using Azure Key_vault store for ACR secrets 
variables: 
  MyRunNumber: '1.0.0-CI-$(Build.BuildNumber)'

steps:
- bash: |
    echo $registryServerName
    docker build \
        -t $registryServerName/$imageName:$MyRunNumber \
        .
  failOnStderr: true
  displayName: 'docker build'

- bash: |
    az login \
        --service-principal \
        -u $clientid \
        -p $clientsecret \
        --tenant $tenantid
  failOnStderr: true
  displayName: 'az login to retrieve secrets from Key_vault'

- bash: |
    cd spring-boot-web
    mvn clean package
  failOnStderr: true
  displayName: 'maven package - if needed we can push this artifact to artifactory such as JFROG'

- bash: |
    acrlogin_password=$(az keyvault secret show -n Password --vault-name delphivault | jq -r '.value')
    echo $(acrlogin_password) | docker login \
        $(registryServerName) \
        -u $(acrlogin_username) \
        --password-stdin
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker login'
- bash: |
    docker push $registryServerName/$imageName:$imageTag
  failOnStderr: true
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'docker push'
- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- bash: |
    cd $(projectName)
    helm package \
        --version $(helmChartVersion) \
        --app-version $(imageTag) \
        charts/$(projectName)
  failOnStderr: true
  displayName: 'helm package'
- bash: |
    cd $(projectName)
    chartPackage=$(ls $(projectName)-*.tgz)
    az acr helm push \
        -n $registryName \
        -u $acrlogin_username \
        -p $acrlogin_password \
        $chartPackage
    echo $(jq -n --arg version "$(helmChartVersion)" '{helmChartVersion: $version}') > $(build.artifactStagingDirectory)/variables.json
  failOnStderr: true
  name: helmPush
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  displayName: 'az acr helm push'
- publish: $(build.artifactStagingDirectory)
  artifact: build-artifact
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
