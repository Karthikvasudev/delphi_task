steps:
- checkout: none
- task: HelmInstaller@1
  displayName: 'install helm'
  inputs:
    helmVersionToInstall: $(helmVersion)
- download: ci-pipeline
  artifact: build-artifact
- bash: |
   az login \
        --service-principal \
        -u $clientid \
        -p $clientsecret \
        --tenant $tenantid
    az aks update -n $aks -g $rg --attach-acr delphiacr
    az aks get-credentials \
        -n $aks \
        -g $rg
    acrlogin_password=$(az keyvault secret show -n Password --vault-name delphivault | jq -r '.value')
    
    helm repo add $registryName https://$registryServerName/helm/v1/repo --username $acrlogin_username --password $acrlogin_password
    
    helmChartVersion=$(jq .helmChartVersion $(pipeline.workspace)/ci-pipeline/build-artifact/variables.json -r)
    echo $helmChartVersion
    helm repo update
    helm search repo delphiacr
    kubectl delete ns --namespace=delphik8s
    kubectl create namespace $k8sNamespace
    helm upgrade \
        --namespace $k8sNamespace \
        --install \
        --wait \
        --version $helmChartVersion \
        --set image.repository=$registryServerName/$projectName/delphi_springboot \
        --set ingress.enabled=false \
        $projectName \
        $registryName/$projectName
  env:
    clientid: $(clientid)
    clientsecret: $(clientsecret)
    registryName: $(registryName)
    tenantid: $(tenantid)
    aks: $(aks)
    rg: $(rg)
    registryServerName: $(registryServerName)
    acrlogin_username: $(acrlogin_username)
    k8sNamespace: $(k8sNamespace)
    projectName: $(projectName)
  failOnStderr: true
  displayName: 'deploy helm chart'